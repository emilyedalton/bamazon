'use strict';

var arrayUtilities = require('../utilities/array');

var splice = arrayUtilities.splice;


function domElementFromSelector(selector) {
  var domElement = typeof selector === 'string' ? document.querySelectorAll(selector)[0] : ///
  selector; ///

  return domElement;
}

function elementsFromDOMElements(domElements) {
  var domElementsWithElements = filterDOMNodes(domElements, function (domElement) {
    return domElement.__element__ !== undefined;
  }),
      elements = domElementsWithElements.map(function (domElement) {
    return domElement.__element__;
  });

  return elements;
}

function descendantDOMNodesFromDOMNode(domNode) {
  var descendantDOMNodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  var start = -1,
      deleteCount = 0,
      childDOMNodes = domNode.childNodes; ///

  splice(descendantDOMNodes, start, deleteCount, childDOMNodes);

  childDOMNodes.forEach(function (childDOMNode) {
    descendantDOMNodesFromDOMNode(childDOMNode, descendantDOMNodes);
  });

  return descendantDOMNodes;
}

function filterDOMNodesBySelector(domNodes, selector) {
  var filteredDOMNodes = filterDOMNodes(domNodes, function (domNode) {
    return domNodeMatchesSelector(domNode, selector);
  });

  return filteredDOMNodes;
}

function domNodeMatchesSelector(domNode, selector) {
  var domNodeType = domNode.nodeType;

  switch (domNodeType) {
    case Node.ELEMENT_NODE:
      {
        var domElement = domNode; ///

        return domElement.matches(selector);
      }

    case Node.TEXT_NODE:
      {
        if (selector === '*') {
          return true;
        }
      }
  }

  return false;
}

function filterDOMNodes(domNodes, test) {
  var filteredDOMNodes = [],
      domNodesLength = domNodes.length;

  for (var index = 0; index < domNodesLength; index++) {
    var domNode = domNodes[index],
        result = test(domNode);

    if (result) {
      filteredDOMNodes.push(domNode);
    }
  }

  return filteredDOMNodes;
}

module.exports = {
  domElementFromSelector: domElementFromSelector,
  elementsFromDOMElements: elementsFromDOMElements,
  descendantDOMNodesFromDOMNode: descendantDOMNodesFromDOMNode,
  filterDOMNodesBySelector: filterDOMNodesBySelector,
  domNodeMatchesSelector: domNodeMatchesSelector,
  filterDOMNodes: filterDOMNodes
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvZG9tLmpzIl0sIm5hbWVzIjpbImFycmF5VXRpbGl0aWVzIiwicmVxdWlyZSIsInNwbGljZSIsImRvbUVsZW1lbnRGcm9tU2VsZWN0b3IiLCJzZWxlY3RvciIsImRvbUVsZW1lbnQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJlbGVtZW50c0Zyb21ET01FbGVtZW50cyIsImRvbUVsZW1lbnRzIiwiZG9tRWxlbWVudHNXaXRoRWxlbWVudHMiLCJmaWx0ZXJET01Ob2RlcyIsIl9fZWxlbWVudF9fIiwidW5kZWZpbmVkIiwiZWxlbWVudHMiLCJtYXAiLCJkZXNjZW5kYW50RE9NTm9kZXNGcm9tRE9NTm9kZSIsImRvbU5vZGUiLCJkZXNjZW5kYW50RE9NTm9kZXMiLCJzdGFydCIsImRlbGV0ZUNvdW50IiwiY2hpbGRET01Ob2RlcyIsImNoaWxkTm9kZXMiLCJmb3JFYWNoIiwiY2hpbGRET01Ob2RlIiwiZmlsdGVyRE9NTm9kZXNCeVNlbGVjdG9yIiwiZG9tTm9kZXMiLCJmaWx0ZXJlZERPTU5vZGVzIiwiZG9tTm9kZU1hdGNoZXNTZWxlY3RvciIsImRvbU5vZGVUeXBlIiwibm9kZVR5cGUiLCJOb2RlIiwiRUxFTUVOVF9OT0RFIiwibWF0Y2hlcyIsIlRFWFRfTk9ERSIsInRlc3QiLCJkb21Ob2Rlc0xlbmd0aCIsImxlbmd0aCIsImluZGV4IiwicmVzdWx0IiwicHVzaCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLGlCQUFpQkMsUUFBUSxvQkFBUixDQUF2Qjs7SUFFUUMsTSxHQUFXRixjLENBQVhFLE07OztBQUVSLFNBQVNDLHNCQUFULENBQWdDQyxRQUFoQyxFQUEwQztBQUN4QyxNQUFNQyxhQUFjLE9BQU9ELFFBQVAsS0FBb0IsUUFBckIsR0FDRUUsU0FBU0MsZ0JBQVQsQ0FBMEJILFFBQTFCLEVBQW9DLENBQXBDLENBREYsR0FDNEM7QUFDeENBLFVBRnZCLENBRHdDLENBR047O0FBRWxDLFNBQU9DLFVBQVA7QUFDRDs7QUFFRCxTQUFTRyx1QkFBVCxDQUFpQ0MsV0FBakMsRUFBOEM7QUFDNUMsTUFBTUMsMEJBQTBCQyxlQUFlRixXQUFmLEVBQTRCLFVBQVNKLFVBQVQsRUFBcUI7QUFDekUsV0FBUUEsV0FBV08sV0FBWCxLQUEyQkMsU0FBbkM7QUFDRCxHQUZ5QixDQUFoQztBQUFBLE1BR01DLFdBQVdKLHdCQUF3QkssR0FBeEIsQ0FBNEIsVUFBU1YsVUFBVCxFQUFxQjtBQUMxRCxXQUFPQSxXQUFXTyxXQUFsQjtBQUNELEdBRlUsQ0FIakI7O0FBT0EsU0FBT0UsUUFBUDtBQUNEOztBQUVELFNBQVNFLDZCQUFULENBQXVDQyxPQUF2QyxFQUF5RTtBQUFBLE1BQXpCQyxrQkFBeUIsdUVBQUosRUFBSTs7QUFDdkUsTUFBTUMsUUFBUSxDQUFDLENBQWY7QUFBQSxNQUNNQyxjQUFjLENBRHBCO0FBQUEsTUFFTUMsZ0JBQWdCSixRQUFRSyxVQUY5QixDQUR1RSxDQUc1Qjs7QUFFM0NwQixTQUFPZ0Isa0JBQVAsRUFBMkJDLEtBQTNCLEVBQWtDQyxXQUFsQyxFQUErQ0MsYUFBL0M7O0FBRUFBLGdCQUFjRSxPQUFkLENBQXNCLFVBQVNDLFlBQVQsRUFBdUI7QUFDM0NSLGtDQUE4QlEsWUFBOUIsRUFBNENOLGtCQUE1QztBQUNELEdBRkQ7O0FBSUEsU0FBT0Esa0JBQVA7QUFDRDs7QUFFRCxTQUFTTyx3QkFBVCxDQUFrQ0MsUUFBbEMsRUFBNEN0QixRQUE1QyxFQUFzRDtBQUNwRCxNQUFNdUIsbUJBQW1CaEIsZUFBZWUsUUFBZixFQUF5QixVQUFTVCxPQUFULEVBQWtCO0FBQ2xFLFdBQU9XLHVCQUF1QlgsT0FBdkIsRUFBZ0NiLFFBQWhDLENBQVA7QUFDRCxHQUZ3QixDQUF6Qjs7QUFJQSxTQUFPdUIsZ0JBQVA7QUFDRDs7QUFFRCxTQUFTQyxzQkFBVCxDQUFnQ1gsT0FBaEMsRUFBeUNiLFFBQXpDLEVBQW1EO0FBQ2pELE1BQU15QixjQUFjWixRQUFRYSxRQUE1Qjs7QUFFQSxVQUFRRCxXQUFSO0FBQ0UsU0FBS0UsS0FBS0MsWUFBVjtBQUF5QjtBQUN2QixZQUFNM0IsYUFBYVksT0FBbkIsQ0FEdUIsQ0FDSzs7QUFFNUIsZUFBT1osV0FBVzRCLE9BQVgsQ0FBbUI3QixRQUFuQixDQUFQO0FBQ0Q7O0FBRUQsU0FBSzJCLEtBQUtHLFNBQVY7QUFBc0I7QUFDcEIsWUFBSTlCLGFBQWEsR0FBakIsRUFBc0I7QUFDcEIsaUJBQU8sSUFBUDtBQUNEO0FBQ0Y7QUFYSDs7QUFjQSxTQUFPLEtBQVA7QUFDRDs7QUFFRCxTQUFTTyxjQUFULENBQXdCZSxRQUF4QixFQUFrQ1MsSUFBbEMsRUFBd0M7QUFDdEMsTUFBTVIsbUJBQW1CLEVBQXpCO0FBQUEsTUFDTVMsaUJBQWlCVixTQUFTVyxNQURoQzs7QUFHQSxPQUFLLElBQUlDLFFBQVEsQ0FBakIsRUFBb0JBLFFBQVFGLGNBQTVCLEVBQTRDRSxPQUE1QyxFQUFxRDtBQUNuRCxRQUFNckIsVUFBVVMsU0FBU1ksS0FBVCxDQUFoQjtBQUFBLFFBQ01DLFNBQVNKLEtBQUtsQixPQUFMLENBRGY7O0FBR0EsUUFBSXNCLE1BQUosRUFBWTtBQUNWWix1QkFBaUJhLElBQWpCLENBQXNCdkIsT0FBdEI7QUFDRDtBQUNGOztBQUVELFNBQU9VLGdCQUFQO0FBQ0Q7O0FBRURjLE9BQU9DLE9BQVAsR0FBaUI7QUFDZnZDLGdEQURlO0FBRWZLLGtEQUZlO0FBR2ZRLDhEQUhlO0FBSWZTLG9EQUplO0FBS2ZHLGdEQUxlO0FBTWZqQjtBQU5lLENBQWpCIiwiZmlsZSI6ImRvbS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgYXJyYXlVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvYXJyYXknKTtcblxuY29uc3QgeyBzcGxpY2UgfSA9IGFycmF5VXRpbGl0aWVzO1xuXG5mdW5jdGlvbiBkb21FbGVtZW50RnJvbVNlbGVjdG9yKHNlbGVjdG9yKSB7XG4gIGNvbnN0IGRvbUVsZW1lbnQgPSAodHlwZW9mIHNlbGVjdG9yID09PSAnc3RyaW5nJykgP1xuICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKVswXSA6ICAvLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjsgIC8vL1xuXG4gIHJldHVybiBkb21FbGVtZW50O1xufVxuXG5mdW5jdGlvbiBlbGVtZW50c0Zyb21ET01FbGVtZW50cyhkb21FbGVtZW50cykge1xuICBjb25zdCBkb21FbGVtZW50c1dpdGhFbGVtZW50cyA9IGZpbHRlckRPTU5vZGVzKGRvbUVsZW1lbnRzLCBmdW5jdGlvbihkb21FbGVtZW50KSB7XG4gICAgICAgICAgcmV0dXJuIChkb21FbGVtZW50Ll9fZWxlbWVudF9fICE9PSB1bmRlZmluZWQpO1xuICAgICAgICB9KSxcbiAgICAgICAgZWxlbWVudHMgPSBkb21FbGVtZW50c1dpdGhFbGVtZW50cy5tYXAoZnVuY3Rpb24oZG9tRWxlbWVudCkge1xuICAgICAgICAgIHJldHVybiBkb21FbGVtZW50Ll9fZWxlbWVudF9fO1xuICAgICAgICB9KTtcblxuICByZXR1cm4gZWxlbWVudHM7XG59XG5cbmZ1bmN0aW9uIGRlc2NlbmRhbnRET01Ob2Rlc0Zyb21ET01Ob2RlKGRvbU5vZGUsIGRlc2NlbmRhbnRET01Ob2RlcyA9IFtdKSB7XG4gIGNvbnN0IHN0YXJ0ID0gLTEsXG4gICAgICAgIGRlbGV0ZUNvdW50ID0gMCxcbiAgICAgICAgY2hpbGRET01Ob2RlcyA9IGRvbU5vZGUuY2hpbGROb2RlczsgIC8vL1xuXG4gIHNwbGljZShkZXNjZW5kYW50RE9NTm9kZXMsIHN0YXJ0LCBkZWxldGVDb3VudCwgY2hpbGRET01Ob2Rlcyk7XG5cbiAgY2hpbGRET01Ob2Rlcy5mb3JFYWNoKGZ1bmN0aW9uKGNoaWxkRE9NTm9kZSkge1xuICAgIGRlc2NlbmRhbnRET01Ob2Rlc0Zyb21ET01Ob2RlKGNoaWxkRE9NTm9kZSwgZGVzY2VuZGFudERPTU5vZGVzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRlc2NlbmRhbnRET01Ob2Rlcztcbn1cblxuZnVuY3Rpb24gZmlsdGVyRE9NTm9kZXNCeVNlbGVjdG9yKGRvbU5vZGVzLCBzZWxlY3Rvcikge1xuICBjb25zdCBmaWx0ZXJlZERPTU5vZGVzID0gZmlsdGVyRE9NTm9kZXMoZG9tTm9kZXMsIGZ1bmN0aW9uKGRvbU5vZGUpIHtcbiAgICByZXR1cm4gZG9tTm9kZU1hdGNoZXNTZWxlY3Rvcihkb21Ob2RlLCBzZWxlY3Rvcik7XG4gIH0pO1xuXG4gIHJldHVybiBmaWx0ZXJlZERPTU5vZGVzO1xufVxuXG5mdW5jdGlvbiBkb21Ob2RlTWF0Y2hlc1NlbGVjdG9yKGRvbU5vZGUsIHNlbGVjdG9yKSB7XG4gIGNvbnN0IGRvbU5vZGVUeXBlID0gZG9tTm9kZS5ub2RlVHlwZTtcblxuICBzd2l0Y2ggKGRvbU5vZGVUeXBlKSB7XG4gICAgY2FzZSBOb2RlLkVMRU1FTlRfTk9ERSA6IHtcbiAgICAgIGNvbnN0IGRvbUVsZW1lbnQgPSBkb21Ob2RlOyAvLy9cblxuICAgICAgcmV0dXJuIGRvbUVsZW1lbnQubWF0Y2hlcyhzZWxlY3Rvcik7XG4gICAgfVxuXG4gICAgY2FzZSBOb2RlLlRFWFRfTk9ERSA6IHtcbiAgICAgIGlmIChzZWxlY3RvciA9PT0gJyonKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZmlsdGVyRE9NTm9kZXMoZG9tTm9kZXMsIHRlc3QpIHtcbiAgY29uc3QgZmlsdGVyZWRET01Ob2RlcyA9IFtdLFxuICAgICAgICBkb21Ob2Rlc0xlbmd0aCA9IGRvbU5vZGVzLmxlbmd0aDtcblxuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgZG9tTm9kZXNMZW5ndGg7IGluZGV4KyspIHtcbiAgICBjb25zdCBkb21Ob2RlID0gZG9tTm9kZXNbaW5kZXhdLFxuICAgICAgICAgIHJlc3VsdCA9IHRlc3QoZG9tTm9kZSk7XG5cbiAgICBpZiAocmVzdWx0KSB7XG4gICAgICBmaWx0ZXJlZERPTU5vZGVzLnB1c2goZG9tTm9kZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZpbHRlcmVkRE9NTm9kZXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBkb21FbGVtZW50RnJvbVNlbGVjdG9yLFxuICBlbGVtZW50c0Zyb21ET01FbGVtZW50cyxcbiAgZGVzY2VuZGFudERPTU5vZGVzRnJvbURPTU5vZGUsXG4gIGZpbHRlckRPTU5vZGVzQnlTZWxlY3RvcixcbiAgZG9tTm9kZU1hdGNoZXNTZWxlY3RvcixcbiAgZmlsdGVyRE9NTm9kZXNcbn07XG4iXX0=