'use strict';

function on(eventTypes, handler) {
  var element = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this;
  var intermediateHandler = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

  eventTypes = eventTypes.split(' '); ///

  eventTypes.forEach(function (eventType) {
    var eventListener = this.addEventListener(eventType, handler, element, intermediateHandler);

    this.domElement.addEventListener(eventType, eventListener);
  }.bind(this));
}

function off(eventTypes, handler) {
  var element = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this;

  eventTypes = eventTypes.split(' '); ///

  eventTypes.forEach(function (eventType) {
    var eventListener = this.removeEventListener(eventType, handler, element);

    this.domElement.removeEventListener(eventType, eventListener);
  }.bind(this));
}

module.exports = {
  on: on,
  off: off,
  addEventListener: addEventListener,
  removeEventListener: removeEventListener
};

function addEventListener(eventType, handler, element, intermediateHandler) {
  if (!this.hasOwnProperty('eventListeners')) {
    this.eventListeners = [];
  }

  var eventListeners = this.eventListeners,
      eventListener = createEventListener(eventType, handler, element, intermediateHandler);

  eventListeners.push(eventListener);

  return eventListener;
}

function removeEventListener(eventType, handler, element) {
  var eventListeners = this.eventListeners,
      eventListener = findEventListener(eventListeners, eventType, handler, element),
      index = eventListeners.indexOf(eventListener),
      start = index,
      ///
  deleteCount = 1;

  eventListeners.splice(start, deleteCount);

  if (eventListeners.length === 0) {
    delete this.eventListeners;
  }

  return eventListener;
}

function createEventListener(eventType, handler, element, intermediateHandler) {
  var eventListener = void 0;

  if (intermediateHandler === null) {
    eventListener = function eventListener(event) {
      handler.call(element, event);
    };
  } else {
    eventListener = function eventListener(event) {
      intermediateHandler(handler, event, element);
    };
  }

  Object.assign(eventListener, {
    eventType: eventType,
    handler: handler,
    element: element
  });

  return eventListener;
}

function findEventListener(eventListeners, eventType, handler, element) {
  var eventListener = eventListeners.find(function (eventListener) {
    var found = eventListener.element === element && eventListener.handler === handler && eventListener.eventType === eventType; ///

    return found;
  });

  return eventListener;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbnMvZXZlbnQuanMiXSwibmFtZXMiOlsib24iLCJldmVudFR5cGVzIiwiaGFuZGxlciIsImVsZW1lbnQiLCJpbnRlcm1lZGlhdGVIYW5kbGVyIiwic3BsaXQiLCJmb3JFYWNoIiwiZXZlbnRUeXBlIiwiZXZlbnRMaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJkb21FbGVtZW50IiwiYmluZCIsIm9mZiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJtb2R1bGUiLCJleHBvcnRzIiwiaGFzT3duUHJvcGVydHkiLCJldmVudExpc3RlbmVycyIsImNyZWF0ZUV2ZW50TGlzdGVuZXIiLCJwdXNoIiwiZmluZEV2ZW50TGlzdGVuZXIiLCJpbmRleCIsImluZGV4T2YiLCJzdGFydCIsImRlbGV0ZUNvdW50Iiwic3BsaWNlIiwibGVuZ3RoIiwiZXZlbnQiLCJjYWxsIiwiT2JqZWN0IiwiYXNzaWduIiwiZmluZCIsImZvdW5kIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxTQUFTQSxFQUFULENBQVlDLFVBQVosRUFBd0JDLE9BQXhCLEVBQTZFO0FBQUEsTUFBNUNDLE9BQTRDLHVFQUFsQyxJQUFrQztBQUFBLE1BQTVCQyxtQkFBNEIsdUVBQU4sSUFBTTs7QUFDM0VILGVBQWFBLFdBQVdJLEtBQVgsQ0FBaUIsR0FBakIsQ0FBYixDQUQyRSxDQUN2Qzs7QUFFcENKLGFBQVdLLE9BQVgsQ0FBbUIsVUFBU0MsU0FBVCxFQUFvQjtBQUNyQyxRQUFNQyxnQkFBZ0IsS0FBS0MsZ0JBQUwsQ0FBc0JGLFNBQXRCLEVBQWlDTCxPQUFqQyxFQUEwQ0MsT0FBMUMsRUFBbURDLG1CQUFuRCxDQUF0Qjs7QUFFQSxTQUFLTSxVQUFMLENBQWdCRCxnQkFBaEIsQ0FBaUNGLFNBQWpDLEVBQTRDQyxhQUE1QztBQUNELEdBSmtCLENBSWpCRyxJQUppQixDQUlaLElBSlksQ0FBbkI7QUFLRDs7QUFFRCxTQUFTQyxHQUFULENBQWFYLFVBQWIsRUFBeUJDLE9BQXpCLEVB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V0FBT3lCLEtBQVA7QUFDRCxHQU5xQixDQUF0Qjs7QUFRQSxTQUFPeEIsYUFBUDtBQUNEIiwiZmlsZSI6ImV2ZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBvbihldmVudFR5cGVzLCBoYW5kbGVyLCBlbGVtZW50ID0gdGhpcywgaW50ZXJtZWRpYXRlSGFuZGxlciA9IG51bGwpIHtcbiAgZXZlbnRUeXBlcyA9IGV2ZW50VHlwZXMuc3BsaXQoJyAnKTsgLy8vXG5cbiAgZXZlbnRUeXBlcy5mb3JFYWNoKGZ1bmN0aW9uKGV2ZW50VHlwZSkge1xuICAgIGNvbnN0IGV2ZW50TGlzdGVuZXIgPSB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBlbGVtZW50LCBpbnRlcm1lZGlhdGVIYW5kbGVyKTtcbiAgICBcbiAgICB0aGlzLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGV2ZW50TGlzdGVuZXIpO1xuICB9LmJpbmQodGhpcykpO1xufVxuXG5mdW5jdGlvbiBvZmYoZXZlbnRUeXBlcywgaGFuZGxlciwgZWxlbWVudCA9IHRoaXMpIHtcbiAgZXZlbnRUeXBlcyA9IGV2ZW50VHlwZXMuc3BsaXQoJyAnKTsgLy8vXG5cbiAgZXZlbnRUeXBlcy5mb3JFYWNoKGZ1bmN0aW9uKGV2ZW50VHlwZSkge1xuICAgIGNvbnN0IGV2ZW50TGlzdGVuZXIgPSB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBlbGVtZW50KTtcblxuICAgIHRoaXMuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgZXZlbnRMaXN0ZW5lcik7XG4gIH0uYmluZCh0aGlzKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBvbixcbiAgb2ZmLFxuICBhZGRFdmVudExpc3RlbmVyLFxuICByZW1vdmVFdmVudExpc3RlbmVyXG59O1xuXG5mdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlciwgZWxlbWVudCwgaW50ZXJtZWRpYXRlSGFuZGxlcikge1xuICBpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkoJ2V2ZW50TGlzdGVuZXJzJykpIHtcbiAgICB0aGlzLmV2ZW50TGlzdGVuZXJzID0gW107XG4gIH1cbiAgXG4gIGNvbnN0IGV2ZW50TGlzdGVuZXJzID0gdGhpcy5ldmVudExpc3RlbmVycyxcbiAgICAgICAgZXZlbnRMaXN0ZW5lciA9IGNyZWF0ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBlbGVtZW50LCBpbnRlcm1lZGlhdGVIYW5kbGVyKTtcblxuICBldmVudExpc3RlbmVycy5wdXNoKGV2ZW50TGlzdGVuZXIpO1xuXG4gIHJldHVybiBldmVudExpc3RlbmVyO1xufVxuXG5mdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlciwgZWxlbWVudCkge1xuICBjb25zdCBldmVudExpc3RlbmVycyA9IHRoaXMuZXZlbnRMaXN0ZW5lcnMsXG4gICAgICAgIGV2ZW50TGlzdGVuZXIgPSBmaW5kRXZlbnRMaXN0ZW5lcihldmVudExpc3RlbmVycywgZXZlbnRUeXBlLCBoYW5kbGVyLCBlbGVtZW50KSxcbiAgICAgICAgaW5kZXggPSBldmVudExpc3RlbmVycy5pbmRleE9mKGV2ZW50TGlzdGVuZXIpLFxuICAgICAgICBzdGFydCA9IGluZGV4LCAgLy8vXG4gICAgICAgIGRlbGV0ZUNvdW50ID0gMTtcblxuICBldmVudExpc3RlbmVycy5zcGxpY2Uoc3RhcnQsIGRlbGV0ZUNvdW50KTtcblxuICBpZiAoZXZlbnRMaXN0ZW5lcnMubGVuZ3RoID09PSAwKSB7XG4gICAgZGVsZXRlIHRoaXMuZXZlbnRMaXN0ZW5lcnM7XG4gIH1cbiAgXG4gIHJldHVybiBldmVudExpc3RlbmVyO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlciwgZWxlbWVudCwgaW50ZXJtZWRpYXRlSGFuZGxlcikge1xuICBsZXQgZXZlbnRMaXN0ZW5lcjtcblxuICBpZiAoaW50ZXJtZWRpYXRlSGFuZGxlciA9PT0gbnVsbCkge1xuICAgIGV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgaGFuZGxlci5jYWxsKGVsZW1lbnQsIGV2ZW50KVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgZXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICBpbnRlcm1lZGlhdGVIYW5kbGVyKGhhbmRsZXIsIGV2ZW50LCBlbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICBPYmplY3QuYXNzaWduKGV2ZW50TGlzdGVuZXIsIHtcbiAgICBldmVudFR5cGUsXG4gICAgaGFuZGxlcixcbiAgICBlbGVtZW50XG4gIH0pO1xuXG4gIHJldHVybiBldmVudExpc3RlbmVyO1xufVxuXG5mdW5jdGlvbiBmaW5kRXZlbnRMaXN0ZW5lcihldmVudExpc3RlbmVycywgZXZlbnRUeXBlLCBoYW5kbGVyLCBlbGVtZW50KSB7XG4gIGNvbnN0IGV2ZW50TGlzdGVuZXIgPSBldmVudExpc3RlbmVycy5maW5kKGZ1bmN0aW9uKGV2ZW50TGlzdGVuZXIpIHtcbiAgICBjb25zdCBmb3VuZCA9ICggKGV2ZW50TGlzdGVuZXIuZWxlbWVudCA9PT0gZWxlbWVudCkgJiZcbiAgICAgICAgICAgICAgICAgICAgKGV2ZW50TGlzdGVuZXIuaGFuZGxlciA9PT0gaGFuZGxlcikgJiZcbiAgICAgICAgICAgICAgICAgICAgKGV2ZW50TGlzdGVuZXIuZXZlbnRUeXBlID09PSBldmVudFR5cGUpICk7ICAvLy9cbiAgICBcbiAgICByZXR1cm4gZm91bmQ7XG4gIH0pO1xuICBcbiAgcmV0dXJuIGV2ZW50TGlzdGVuZXI7XG59XG4iXX0=