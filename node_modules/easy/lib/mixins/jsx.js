'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var constants = require('../constants'),
    nameUtilities = require('../utilities/name'),
    arrayUtilities = require('../utilities/array'),
    objectUtilities = require('../utilities/object'),
    elementsUtilities = require('../utilities/elements');

var first = arrayUtilities.first,
    combine = objectUtilities.combine,
    prune = objectUtilities.prune,
    SVG_NAMESPACE_URI = constants.SVG_NAMESPACE_URI,
    isHTMLAttributeName = nameUtilities.isHTMLAttributeName,
    isSVGAttributeName = nameUtilities.isSVGAttributeName,
    removeFalseyElements = elementsUtilities.removeFalseyElements,
    replaceStringsWithTextElements = elementsUtilities.replaceStringsWithTextElements;


function applyProperties() {
  var properties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var defaultProperties = arguments[1];
  var ignoredProperties = arguments[2];

  combine(properties, defaultProperties);

  var childElements = childElementsFromElementAndProperties(this, properties);

  prune(properties, ignoredProperties);

  var svg = this.domElement.namespaceURI === SVG_NAMESPACE_URI,
      names = Object.keys(properties); ///

  names.forEach(function (name) {
    var value = properties[name];

    if (false) {
      ///
    } else if (isHandlerName(name)) {
      addHandler(this, name, value);
    } else if (isAttributeName(name, svg)) {
      addAttribute(this, name, value);
    } else {
      if (!this.hasOwnProperty('properties')) {
        var _properties = {};

        Object.assign(this, {
          properties: _properties
        });
      }

      this.properties[name] = value;
    }
  }.bind(this));

  var context = {};

  childElements.forEach(function (childElement) {
    updateContext(childElement, context);

    childElement.addTo(this);
  }.bind(this));

  Object.assign(this, {
    context: context
  });
}

function getProperties() {
  return this.properties;
}

function getContext() {
  return this.context;
}

function assignContext(names, thenDelete) {
  var argumentsLength = arguments.length;

  if (argumentsLength === 1) {
    var firstArgument = first(arguments);

    if (typeof firstArgument === 'boolean') {
      names = Object.keys(this.context);

      thenDelete = firstArgument;
    } else {
      thenDelete = true;
    }
  }

  if (argumentsLength === 0) {
    names = Object.keys(this.context);

    thenDelete = true;
  }

  names.forEach(function (name) {
    var value = this.context[name],
        propertyName = name,
        ///
    descriptor = {
      value: value
    };

    Object.defineProperty(this, propertyName, descriptor);

    if (thenDelete) {
      delete this.context[name];
    }
  }.bind(this), []);
}

module.exports = {
  applyProperties: applyProperties,
  getProperties: getProperties,
  getContext: getContext,
  assignContext: assignContext
};

function childElementsFromElementAndProperties(element, properties) {
  var childElements = typeof element.childElements === 'function' ? element.childElements(properties) : properties.childElements;

  if (!(childElements instanceof Array)) {
    childElements = [childElements];
  }

  childElements = removeFalseyElements(childElements);

  childElements = replaceStringsWithTextElements(childElements);

  return childElements;
}

function updateContext(childElement, context) {
  var parentContext = typeof childElement.parentContext === 'function' ? childElement.parentContext() : childElement.context; ///

  Object.assign(context, parentContext);

  delete childElement.context;
}

function addHandler(element, name, value) {
  var eventType = name.substr(2).toLowerCase(),
      ///
  handler = value; ///

  element.on(eventType, handler);
}

function addAttribute(element, name, value) {
  if (name === 'className') {
    name = 'class';
  }

  if (name === 'htmlFor') {
    name = 'for';
  }

  if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
    var keys = Object.keys(value);

    keys.forEach(function (key) {
      element.domElement[name][key] = value[key];
    }.bind(this));
  } else if (typeof value === 'boolean') {
    if (value) {
      value = name; ///

      element.addAttribute(name, value);
    }
  } else {
    element.addAttribute(name, value);
  }
}

function isHandlerName(name) {
  return name.match(/^on/);
}

function isAttributeName(name, svg) {
  return svg ? isSVGAttributeName(name) : isHTMLAttributeName(name);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbnMvanN4LmpzIl0sIm5hbWVzIjpbImNvbnN0YW50cyIsInJlcXVpcmUiLCJuYW1lVXRpbGl0aWVzIiwiYXJyYXlVdGlsaXRpZXMiLCJvYmplY3RVdGlsaXRpZXMiLCJlbGVtZW50c1V0aWxpdGllcyIsImZpcnN0IiwiY29tYmluZSIsInBydW5lIiwiU1ZHX05BTUVTUEFDRV9VUkkiLCJpc0hUTUxBdHRyaWJ1dGVOYW1lIiwiaXNTVkdBdHRyaWJ1dGVOYW1lIiwicmVtb3ZlRmFsc2V5RWxlbWVudHMiLCJyZXBsYWNlU3RyaW5nc1dpdGhUZXh0RWxlbWVudHMiLCJhcHBseVByb3BlcnRpZXMiLCJwcm9wZXJ0aWVzIiwiZGVmYXVsdFByb3BlcnRpZXMiLCJpZ25vcmVkUHJvcGVydGllcyIsImNoaWxkRWxlbWVudHMiLCJjaGlsZEVsZW1lbnRzRnJvbUVsZW1lbnRBbmRQcm9wZXJ0aWVzIiwic3ZnIiwiZG9tRWxlbWVudCIsIm5hbWVzcGFjZVVSSSIsIm5hbWVzIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJuYW1lIiwidmFsdWUiLCJpc0hhbmRsZXJOYW1lIiwiYWRkSGFuZGxlciIsImlzQXR0cmlidXRlTmFtZSIsImFkZEF0dHJpYnV0ZSIsImhhc093blByb3BlcnR5IiwiYXNzaWduIiwiYmluZCIsImNvbnRleHQiLCJjaGlsZEVsZW1lbnQiLCJ1cGRhdGVDb250ZXh0IiwiYWRkVG8iLCJnZXRQcm9wZXJ0aWVzIiwiZ2V0Q29udGV4dCIsImFzc2lnbkNvbnRleHQiLCJ0aGVuRGVsZXRlIiwiYXJndW1lbnRzTGVuZ3RoIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZmlyc3RBcmd1bWVudCIsInByb3BlcnR5TmFtZSIsImRlc2NyaXB0b3IiLCJkZWZpbmVQcm9wZXJ0eSIsIm1vZHVsZSIsImV4cG9ydHMiLCJlbGVtZW50IiwiQXJyYXkiLCJwYXJlbnRDb250ZXh0IiwiZXZlbnRUeXBlIiwic3Vic3RyIiwidG9Mb3dlckNhc2UiLCJo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QUtDLE9BQUwsQ0FBYSxVQUFVbUMsR0FBVixFQUFlO0FBQzFCUixjQUFRaEMsVUFBUixDQUFtQk0sSUFBbkIsRUFBeUJrQyxHQUF6QixJQUFnQ2pDLE1BQU1pQyxHQUFOLENBQWhDO0FBQ0QsS0FGWSxDQUVYMUIsSUFGVyxDQUVOLElBRk0sQ0FBYjtBQUdELEdBTkQsTUFNTyxJQUFJLE9BQU9QLEtBQVAsS0FBaUIsU0FBckIsRUFBZ0M7QUFDckMsUUFBSUEsS0FBSixFQUFXO0FBQ1RBLGNBQVFELElBQVIsQ0FEUyxDQUNLOztBQUVkMEIsY0FBUXJCLFlBQVIsQ0FBcUJMLElBQXJCLEVBQTJCQyxLQUEzQjtBQUNEO0FBQ0YsR0FOTSxNQU1BO0FBQ0x5QixZQUFRckIsWUFBUixDQUFxQkwsSUFBckIsRUFBMkJDLEtBQTNCO0FBQ0Q7QUFDRjs7QUFFRCxTQUFTQyxhQUFULENBQXVCRixJQUF2QixFQUE2QjtBQUMzQixTQUFPQSxLQUFLbUMsS0FBTCxDQUFXLEtBQVgsQ0FBUDtBQUNEOztBQUVELFNBQVMvQixlQUFULENBQXlCSixJQUF6QixFQUErQlAsR0FBL0IsRUFBb0M7QUFDbEMsU0FBT0EsTUFBTVQsbUJBQW1CZ0IsSUFBbkIsQ0FBTixHQUFpQ2pCLG9CQUFvQmlCLElBQXBCLENBQXhDO0FBQ0QiLCJmaWxlIjoianN4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKCcuLi9jb25zdGFudHMnKSxcbiAgICAgIG5hbWVVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvbmFtZScpLFxuICAgICAgYXJyYXlVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvYXJyYXknKSxcbiAgICAgIG9iamVjdFV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9vYmplY3QnKSxcbiAgICAgIGVsZW1lbnRzVXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL2VsZW1lbnRzJyk7XG5cbmNvbnN0IHsgZmlyc3QgfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyBjb21iaW5lLCBwcnVuZSB9ID0gb2JqZWN0VXRpbGl0aWVzLFxuICAgICAgeyBTVkdfTkFNRVNQQUNFX1VSSSB9ID0gY29uc3RhbnRzLFxuICAgICAgeyBpc0hUTUxBdHRyaWJ1dGVOYW1lLCBpc1NWR0F0dHJpYnV0ZU5hbWUgfSA9IG5hbWVVdGlsaXRpZXMsXG4gICAgICB7IHJlbW92ZUZhbHNleUVsZW1lbnRzLCByZXBsYWNlU3RyaW5nc1dpdGhUZXh0RWxlbWVudHMgfSA9IGVsZW1lbnRzVXRpbGl0aWVzO1xuXG5mdW5jdGlvbiBhcHBseVByb3BlcnRpZXMocHJvcGVydGllcyA9IHt9LCBkZWZhdWx0UHJvcGVydGllcywgaWdub3JlZFByb3BlcnRpZXMpIHtcbiAgY29tYmluZShwcm9wZXJ0aWVzLCBkZWZhdWx0UHJvcGVydGllcyk7XG5cbiAgY29uc3QgY2hpbGRFbGVtZW50cyA9IGNoaWxkRWxlbWVudHNGcm9tRWxlbWVudEFuZFByb3BlcnRpZXModGhpcywgcHJvcGVydGllcyk7XG5cbiAgcHJ1bmUocHJvcGVydGllcywgaWdub3JlZFByb3BlcnRpZXMpO1xuXG4gIGNvbnN0IHN2ZyA9ICh0aGlzLmRvbUVsZW1lbnQubmFtZXNwYWNlVVJJID09PSBTVkdfTkFNRVNQQUNFX1VSSSksXG4gICAgICAgIG5hbWVzID0gT2JqZWN0LmtleXMocHJvcGVydGllcyk7ICAvLy9cblxuICBuYW1lcy5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHByb3BlcnRpZXNbbmFtZV07XG5cbiAgICBpZiAoZmFsc2UpIHtcbiAgICAgIC8vL1xuICAgIH0gZWxzZSBpZiAoaXNIYW5kbGVyTmFtZShuYW1lKSkge1xuICAgICAgYWRkSGFuZGxlcih0aGlzLCBuYW1lLCB2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChpc0F0dHJpYnV0ZU5hbWUobmFtZSwgc3ZnKSkge1xuICAgICAgYWRkQXR0cmlidXRlKHRoaXMsIG5hbWUsIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCF0aGlzLmhhc093blByb3BlcnR5KCdwcm9wZXJ0aWVzJykpIHtcbiAgICAgICAgY29uc3QgcHJvcGVydGllcyA9IHt9O1xuXG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywge1xuICAgICAgICAgIHByb3BlcnRpZXNcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucHJvcGVydGllc1tuYW1lXSA9IHZhbHVlO1xuICAgIH1cbiAgfS5iaW5kKHRoaXMpKTtcblxuICBjb25zdCBjb250ZXh0ID0ge307XG5cbiAgY2hpbGRFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uKGNoaWxkRWxlbWVudCkge1xuICAgIHVwZGF0ZUNvbnRleHQoY2hpbGRFbGVtZW50LCBjb250ZXh0KTtcblxuICAgIGNoaWxkRWxlbWVudC5hZGRUbyh0aGlzKTtcbiAgfS5iaW5kKHRoaXMpKTtcblxuICBPYmplY3QuYXNzaWduKHRoaXMsIHtcbiAgICBjb250ZXh0XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRQcm9wZXJ0aWVzKCkge1xuICByZXR1cm4gdGhpcy5wcm9wZXJ0aWVzO1xufVxuXG5mdW5jdGlvbiBnZXRDb250ZXh0KCkge1xuICByZXR1cm4gdGhpcy5jb250ZXh0O1xufVxuXG5mdW5jdGlvbiBhc3NpZ25Db250ZXh0KG5hbWVzLCB0aGVuRGVsZXRlKSB7XG4gIGNvbnN0IGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cbiAgaWYgKGFyZ3VtZW50c0xlbmd0aCA9PT0gMSkge1xuICAgIGNvbnN0IGZpcnN0QXJndW1lbnQgPSBmaXJzdChhcmd1bWVudHMpO1xuXG4gICAgaWYgKHR5cGVvZiBmaXJzdEFyZ3VtZW50ID09PSAnYm9vbGVhbicpIHtcbiAgICAgIG5hbWVzID0gT2JqZWN0LmtleXModGhpcy5jb250ZXh0KTtcblxuICAgICAgdGhlbkRlbGV0ZSA9IGZpcnN0QXJndW1lbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoZW5EZWxldGUgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChhcmd1bWVudHNMZW5ndGggPT09IDApIHtcbiAgICBuYW1lcyA9IE9iamVjdC5rZXlzKHRoaXMuY29udGV4dCk7XG5cbiAgICB0aGVuRGVsZXRlID0gdHJ1ZTtcbiAgfVxuXG4gIG5hbWVzLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5jb250ZXh0W25hbWVdLFxuICAgICAgICAgIHByb3BlcnR5TmFtZSA9IG5hbWUsICAvLy9cbiAgICAgICAgICBkZXNjcmlwdG9yID0ge1xuICAgICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgICAgfTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBwcm9wZXJ0eU5hbWUsIGRlc2NyaXB0b3IpO1xuXG4gICAgaWYgKHRoZW5EZWxldGUpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLmNvbnRleHRbbmFtZV07XG4gICAgfVxuICB9LmJpbmQodGhpcyksIFtdKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFwcGx5UHJvcGVydGllcyxcbiAgZ2V0UHJvcGVydGllcyxcbiAgZ2V0Q29udGV4dCxcbiAgYXNzaWduQ29udGV4dFxufTtcblxuZnVuY3Rpb24gY2hpbGRFbGVtZW50c0Zyb21FbGVtZW50QW5kUHJvcGVydGllcyhlbGVtZW50LCBwcm9wZXJ0aWVzKSB7XG4gIGxldCBjaGlsZEVsZW1lbnRzID0gKHR5cGVvZiBlbGVtZW50LmNoaWxkRWxlbWVudHMgPT09ICdmdW5jdGlvbicpID9cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2hpbGRFbGVtZW50cyhwcm9wZXJ0aWVzKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXMuY2hpbGRFbGVtZW50cztcblxuICBpZiAoIShjaGlsZEVsZW1lbnRzIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgY2hpbGRFbGVtZW50cyA9IFtjaGlsZEVsZW1lbnRzXTtcbiAgfVxuXG4gIGNoaWxkRWxlbWVudHMgPSByZW1vdmVGYWxzZXlFbGVtZW50cyhjaGlsZEVsZW1lbnRzKTtcblxuICBjaGlsZEVsZW1lbnRzID0gcmVwbGFjZVN0cmluZ3NXaXRoVGV4dEVsZW1lbnRzKGNoaWxkRWxlbWVudHMpO1xuXG4gIHJldHVybiBjaGlsZEVsZW1lbnRzO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVDb250ZXh0KGNoaWxkRWxlbWVudCwgY29udGV4dCkge1xuICBjb25zdCBwYXJlbnRDb250ZXh0ID0gKHR5cGVvZiBjaGlsZEVsZW1lbnQucGFyZW50Q29udGV4dCA9PT0gJ2Z1bmN0aW9uJykgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZEVsZW1lbnQucGFyZW50Q29udGV4dCgpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZEVsZW1lbnQuY29udGV4dDsgLy8vXG5cbiAgT2JqZWN0LmFzc2lnbihjb250ZXh0LCBwYXJlbnRDb250ZXh0KTtcblxuICBkZWxldGUgY2hpbGRFbGVtZW50LmNvbnRleHQ7XG59XG5cbmZ1bmN0aW9uIGFkZEhhbmRsZXIoZWxlbWVudCwgbmFtZSwgdmFsdWUpIHtcbiAgY29uc3QgZXZlbnRUeXBlID0gbmFtZS5zdWJzdHIoMikudG9Mb3dlckNhc2UoKSwgLy8vXG4gICAgICAgIGhhbmRsZXIgPSB2YWx1ZTsgIC8vL1xuXG4gIGVsZW1lbnQub24oZXZlbnRUeXBlLCBoYW5kbGVyKTtcbn1cblxuZnVuY3Rpb24gYWRkQXR0cmlidXRlKGVsZW1lbnQsIG5hbWUsIHZhbHVlKSB7XG4gIGlmIChuYW1lID09PSAnY2xhc3NOYW1lJykge1xuICAgIG5hbWUgPSAnY2xhc3MnO1xuICB9XG5cbiAgaWYgKG5hbWUgPT09ICdodG1sRm9yJykge1xuICAgIG5hbWUgPSAnZm9yJztcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKTtcblxuICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBlbGVtZW50LmRvbUVsZW1lbnRbbmFtZV1ba2V5XSA9IHZhbHVlW2tleV07XG4gICAgfS5iaW5kKHRoaXMpKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJykge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgdmFsdWUgPSBuYW1lOyAvLy9cblxuICAgICAgZWxlbWVudC5hZGRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBlbGVtZW50LmFkZEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNIYW5kbGVyTmFtZShuYW1lKSB7XG4gIHJldHVybiBuYW1lLm1hdGNoKC9eb24vKTtcbn1cblxuZnVuY3Rpb24gaXNBdHRyaWJ1dGVOYW1lKG5hbWUsIHN2Zykge1xuICByZXR1cm4gc3ZnID8gaXNTVkdBdHRyaWJ1dGVOYW1lKG5hbWUpIDogaXNIVE1MQXR0cmlidXRlTmFtZShuYW1lKVxufVxuIl19